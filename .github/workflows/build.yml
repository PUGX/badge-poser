name: Test

on:
  push:
    branches:
      - '*'
  pull_request:

jobs:
  build:

    runs-on: ubuntu-18.04
    strategy:
      matrix:
        php-versions: [ '8.1', '8.2' ]
        coverage-driver: [ 'pcov' ]

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      uses: php-actions/composer@v5
      with:
        args: --prefer-dist
        version: 2
        php_extensions: gd
        php_version: 8.1

    - name: Yarn install
      uses: actions/setup-node@v3
      with:
        node-version: '16.17.1'
    - run: yarn install

    - name: Rebuild sass
      run: npm rebuild node-sass

    - name: Build frontend
      run: yarn build

    - name: checks that the YAML config files contain no syntax errors
      run: ./bin/console lint:yaml config

    - name: checks that the Twig template files contain no syntax errors
      run: ./bin/console lint:twig templates

    - name: run stylelint checks
      run: yarn stylelint

    - name: Coding Standard Checks
      run: PHP_CS_FIXER_IGNORE_ENV=1 ./vendor/bin/php-cs-fixer fix --dry-run -v

    - name: "Run tests with phpunit/phpunit"
      run: "bin/phpunit -d memory_limit=-1 --coverage-clover clover.xml"
      env:
        REDIS_HOST: localhost
        REDIS_URL: "redis://localhost"

    - name: PHPStan
      run: ./vendor/bin/phpstan analyse -c phpstan.neon --level=8 "src"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  docker:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Check Docker Version
      run: docker --version
    - name: Install Latest Docker
      run: |
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
#        sudo apt-get update
#        sudo apt-get install docker-ce
    - name: Check Docker Version
      run: docker --version

    - name: Build
      run: make build_prod

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    pugx_badge_allin_badges:
        - 'latest_stable_version'
        - 'total'
        - 'latest_unstable_version'
        - 'license'

    pugx_badge_badges:
        - { name: 'latest_stable_version', label: 'Latest Stable Version', route: "pugx_badge_version_latest", latest: 'stable'}
        - { name: 'total', label: 'Total Downloads', route: "pugx_badge_download" }
        - { name: 'latest_unstable_version', label: 'Latest Unstable Version', route: "pugx_badge_version_latest", latest: 'unstable'}
        - { name: 'license', label: 'License', route: "pugx_badge_license"}
        - { name: 'monthly', label: 'Monthly Downloads', route: "pugx_badge_download_type", type: 'monthly'}
        - { name: 'daily', label: 'Daily Downloads', route: "pugx_badge_download_type", type: 'daily'}
        - { name: 'version', label: 'Version', route: "pugx_badge_version" }
        - { name: 'composerlock', label: 'composer.lock', route: "pugx_badge_composerlock" }
        - { name: 'gitattributes', label: '.gitattributes', route: "pugx_badge_gitattributes" }
        - { name: 'dependents', label: 'Dependents', route: "pugx_badge_dependents"}
        - { name: 'suggesters', label: 'Suggesters', route: "pugx_badge_suggesters"}
        - { name: 'circleci', label: 'CircleCI Build', route: "pugx_badge_circleci" }

    app.circle_ci_token: '%env(CIRCLE_CI_TOKEN)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Contributors\Service\RepositoryInterface: '@App\Contributors\Service\Repository'

    App\Service\CircleCiClient:
        arguments:
            - '@router'
            - '@Symfony\Contracts\HttpClient\HttpClientInterface'
            - '%app.circle_ci_token%'
    App\Service\CircleCiClientInterface: '@App\Service\CircleCiClient'

    App\Service\SnippetGenerator:
        arguments:
            - '@router'
            - '%pugx_badge_allin_badges%'
            - '%pugx_badge_badges%'
    App\Service\SnippetGeneratorInterface: '@App\Service\SnippetGenerator'

    App\Stats\Persister\PersisterInterface: '@App\Stats\Persister\RedisPersister'

    App\DateProvider\DateTimeProviderInterface: '@App\DateProvider\CurrentDateTimeProvider'

    App\Stats\Reader\RedisReader:
        arguments:
          - '@Predis\Client'
    App\Stats\Reader\ReaderInterface: '@App\Stats\Reader\RedisReader'


    # Vendor services
    Cache\Adapter\Predis\PredisCachePool:
        arguments:
          - '@Predis\Client'

    GuzzleHttp\Client: ~
    GuzzleHttp\ClientInterface: '@GuzzleHttp\Client'

    Packagist\Api\Client: ~

    Predis\Client: '@snc_redis.default'

    PUGX\Poser\Poser:
        class: ~
        arguments:
            $renders: [ '@PUGX\Poser\SvgPlasticRender', '@PUGX\Poser\SvgFlatRender', '@PUGX\Poser\SvgFlatSquareRender' ]

    PUGX\Poser\SvgPlasticRender:
        class: PUGX\Poser\Render\SvgPlasticRender

    PUGX\Poser\SvgFlatRender:
        class: PUGX\Poser\Render\SvgFlatRender

    PUGX\Poser\SvgFlatSquareRender:
        class: PUGX\Poser\Render\SvgFlatSquareRender

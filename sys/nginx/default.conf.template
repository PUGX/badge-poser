# keeping stale data for max 25h, based on the current s-maxage of 24h we allow max 1h of stale contents being served while updating/not available.
fastcgi_cache_path /data/nginx/cache keys_zone=cached_badges:10m levels=1:2 max_size=500m inactive=25h use_temp_path=off;

log_format custom '$remote_addr - $remote_user [$time_local] '
                  '"$request" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent" "$gzip_ratio" '
                  'CACHE[$request_method@@$host@@$request_uri]:$skip_cache:$upstream_cache_status';

init_by_lua_file '/etc/nginx/conf.d/lua/init.lua';

map $host $skip_cache {
    default 0;

    # used for healthchecks
    localhost 1;

    # used for dev env
    poser.local 1;

    # used for staging env
    stg.poser.pugx.org 1;
}

server {
    listen 80;
    server_name poser.pugx.org poser.packagist.org poser.local stg.poser.pugx.org;

    root /application/public;

    if ($request_uri ~ "/dark-canary/") { set $skip_cache 1; }

    fastcgi_cache cached_badges;
    fastcgi_cache_methods GET HEAD;
    fastcgi_cache_key "$request_method@@$host@@$request_uri";
    fastcgi_cache_bypass $is_args $skip_cache;
    fastcgi_no_cache $skip_cache;
    fastcgi_cache_min_uses 1; # generates cache for each obj
    fastcgi_cache_revalidate on;
    fastcgi_cache_background_update on; # serve a STALE while refreshing content, next req will be HIT
    fastcgi_cache_use_stale updating error timeout invalid_header http_500 http_503; # when "updating" serves a STALE resp
    fastcgi_cache_valid 200 3600s;
    add_header X-FastCGI-Cache $upstream_cache_status;

    gzip on;
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml;

    location ~* \.(ico|css|js)$ {
        expires 365d;
    }

    # local = 127.0.0.11
    # aws = 169.254.169.253
    resolver ${RESOLVER_IP} ipv6=off;
    resolver_timeout 2s;

    access_log /proc/self/fd/1 custom;
    error_log /proc/self/fd/2;

    add_header Access-Control-Allow-Origin *;

    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    location ~ ^/dark-canary {
        internal;

        set_by_lua_block $request_url {
            return string.gsub(ngx.var.request_uri, "/dark%-canary", "")
        }
        set_by_lua_block $document_url {
            return string.gsub(ngx.var.document_uri, "/dark%-canary", "")
        }

        # fastcgi_pass ${PHPFPM_CANARY_HOST}:9001;
        fastcgi_pass ${PHPFPM_CANARY_HOST}:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        include fastcgi_params;
        fastcgi_param REQUEST_URI $request_url;
        fastcgi_param DOCUMENT_URI $document_url;
        fastcgi_param SCRIPT_NAME /index.php;
        fastcgi_param SCRIPT_FILENAME /application/public/index.php;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    location / {
        try_files $uri /index.php$is_args$args;
    }

    location /total {
        default_type 'text/plain';

        content_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()
            local ok, err = red:connect(redis_host, 6379)
            if ok then
                local res, err = red:get("STAT.TOTAL")
                ngx.say(res)
            end
            ngx.say(".")
        }
    }

    location ~ ^/stats {
        default_type 'text/plain';
        internal;

        content_by_lua_file '/etc/nginx/conf.d/lua/stats.lua';
    }

    location ~ ^/index\.php(/|$) {
        internal;

        # local = phpfpm
        # aws = 127.0.0.1
        fastcgi_pass ${PHPFPM_HOST}:9000;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        access_by_lua_file '/etc/nginx/conf.d/lua/hook.lua';
    }

    location ~ \.php$ {
        return 404;
    }
}

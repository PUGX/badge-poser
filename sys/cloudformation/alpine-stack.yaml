AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ServiceName:
    Type: String
    Default: 'badge-poser'
    Description: >
      Optional - The name of the service being created. It identifies all the resources related to it.
  ServicePort:
    Type: String
    Default: '80'
    Description: >
      Optional - The listening port of the service.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >
      Mandatory - Specifies the ID of an existing VPC in which to launch your container instances.
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|)$'
    ConstraintDescription: >
      VPC Id must begin with 'vpc-' or leave blank to have a new VPC created
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      Mandatory - Specifies the ID of Subnets belongin to the correct VPC.
  Environment:
    Type: String
    Description: >
      Mandatory - The Environment
  ELBCertificateArn:
    Type: String
    Description: >
      Mandatory - Specifies the ARN of the Certificate.
  ExecRoleArn:
    Type: String
    Description: >
      Mandatory - Specifies the ARN of the Execution Role for ECS.
  EcrImageTagPhp:
    Type: String
    Description: >
      Mandatory - Specifies the ECR Image Tag for PHP-FPM container.
  EcrImageTagNginx:
    Type: String
    Description: >
      Mandatory - Specifies the ECR Image Tag for nginx container.

  EnvAPPENV:
    Type: String
    Default: "prod"
    Description: Optional - Environment variable for APP_ENV
  EnvAPPSECRET:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for APP_SECRET
  EnvAPPXDEBUG:
    Type: String
    Default: "0"
    Description: Optional - Environment variable for APP_XDEBUG
  EnvAPPXDEBUGHOST:
    Type: String
    Default: ""
    Description: Optional - Environment variable for APP_XDEBUG_HOST
  EnvREDISURL:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for REDIS_URL
  EnvGITHUBAUTHMETHOD:
    Type: String
    Default: "http_token"
    Description: Optional - Environment variable for GITHUB_AUTH_METHOD
  EnvGITHUBUSERNAME:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for GITHUB_USERNAME
  EnvGITHUBSECRET:
    Type: String
    Default: ""
    Description: Optional - Environment variable for GITHUB_SECRET
  EnvCIRCLECITOKEN:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for CIRCLE_CI_TOKEN
  EnvSENTRYDSN:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for SENTRY_DSN
  EnvBITBUCKETAUTHMETHOD:
    Type: String
    Default: "http_password"
    Description: Optional - Environment variable for BITBUCKET_AUTH_METHOD
  EnvBITBUCKETSECRET:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for BITBUCKET_SECRET
  EnvBITBUCKETTOKEN:
    Type: String
    Default: ""
    Description: Mandatory - Environment variable for BITBUCKET_TOKEN
  EnvTRUSTEDPROXIES:
    Type: String
    Default: "REMOTE_ADDR"
    Description: Optional - Environment variable for TRUSTED_PROXIES

Resources:

  # SECURITY GROUP
  sgelb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: badge-poser-elb
      GroupName: badge-poser-elb
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: env
          Value: badge-poser
  sgecs:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: badge-poser-ecs
      GroupName: badge-poser-ecs
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: env
          Value: badge-poser
  sgredis:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: badge-poser-redis
      GroupName: badge-poser-redis
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: env
          Value: badge-poser

  # CLOUDWATCH LOGS
  cloudwatchloggroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '-', [ !Ref 'ServiceName', 'logs']]

  # ELB
  elb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
    - sgelb
    Properties:
      Name: !Join [ '', [ !Ref 'ServiceName', '-elb']]
      Subnets: !Ref 'Subnets'
      SecurityGroups:
      - !Ref 'sgelb'
      Tags:
        - Key: env
          Value: badge-poser

  # ELB LISTENER
  elblistener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - elb
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "aws is a teapot"
            StatusCode: "418"
      LoadBalancerArn: !Ref 'elb'
      Port: 80
      Protocol: HTTP

  elblistener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - elb
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "https teapot"
            StatusCode: "418"
      LoadBalancerArn: !Ref 'elb'
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref 'ELBCertificateArn'

  # ECS CLUSTER
  ecscluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ '-', [ !Ref 'ServiceName', 'cluster', !Ref 'Environment' ]]
      Tags:
        - Key: env
          Value: badge-poser

  # ECS SERVICE
  ecsservice:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - ecscluster
    - ecstask
    - elb
    - elbtargetgroup
    Properties:
      Cluster: !Ref 'ecscluster'
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 15
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName' # nginx
          ContainerPort: 80
          TargetGroupArn: !Ref 'elbtargetgroup'
      ServiceName: !Ref 'ServiceName'
      TaskDefinition: !Ref 'ecstask'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref 'Subnets'
          SecurityGroups:
          - !Ref 'sgecs'
      Tags:
        - Key: env
          Value: badge-poser

  # ECS TASK DEFINITION
  ecstask:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
    - cloudwatchloggroup
    Properties:
      ExecutionRoleArn: !Ref 'ExecRoleArn'
      ContainerDefinitions:
        - PortMappings:
            - HostPort: 9000
              Protocol: tcp
              ContainerPort: 9000
          Environment:
          - Name: APP_ENV
            Value: !Ref 'EnvAPPENV'
          - Name: APP_SECRET
            Value: !Ref 'EnvAPPSECRET'
          - Name: APP_XDEBUG
            Value: !Ref 'EnvAPPXDEBUG'
          - Name: APP_XDEBUG_HOST
            Value: !Ref 'EnvAPPXDEBUGHOST'
          - Name: REDIS_URL
            Value: !Ref 'EnvREDISURL'
          - Name: GITHUB_AUTH_METHOD
            Value: !Ref 'EnvGITHUBAUTHMETHOD'
          - Name: GITHUB_USERNAME
            Value: !Ref 'EnvGITHUBUSERNAME'
          - Name: GITHUB_SECRET
            Value: !Ref 'EnvGITHUBSECRET'
          - Name: CIRCLE_CI_TOKEN
            Value: !Ref 'EnvCIRCLECITOKEN'
          - Name: SENTRY_DSN
            Value: !Ref 'EnvSENTRYDSN'
          - Name: BITBUCKET_AUTH_METHOD
            Value: !Ref 'EnvBITBUCKETAUTHMETHOD'
          - Name: BITBUCKET_SECRET
            Value: !Ref 'EnvBITBUCKETSECRET'
          - Name: BITBUCKET_TOKEN
            Value: !Ref 'EnvBITBUCKETTOKEN'
          - Name: TRUSTED_PROXIES
            Value: !Ref 'EnvTRUSTEDPROXIES'
          Image: !Join [ '', [ !Ref 'AWS::AccountId', '.dkr.ecr.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'ServiceName', ':phpfpm-', !Ref 'EcrImageTagPhp' ]]
          Essential: true
          Name: phpfpm
          DependsOn:
            - Condition: START
              ContainerName: phpfpm
          Links:
            - phpfpm
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'cloudwatchloggroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Join [ '-', [ !Ref 'ServiceName', 'php' ]]
        - PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
          Image: !Join [ '', [ !Ref 'AWS::AccountId', '.dkr.ecr.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'ServiceName', ':nginx-', !Ref 'EcrImageTagNginx' ]]
          Essential: true
          Name: !Ref 'ServiceName' # nginx
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'cloudwatchloggroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Join [ '-', [ !Ref 'ServiceName', 'nginx' ]]
      Memory: '1024'
      Family: !Ref 'ServiceName'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
      Tags:
        - Key: env
          Value: badge-poser

  # AUTO SCALING
  asscalabletarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
    - ecsservice
    Properties:
      MaxCapacity: 1
      MinCapacity: 1
      ResourceId: !Join [ '/', [ 'service', !Join [ '-', [ !Ref 'ServiceName', 'cluster', !Ref 'Environment' ]], !Ref 'ServiceName' ]]
      RoleARN: !Ref 'ExecRoleArn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'

  # ELB TARGET GROUP
  elbtargetgroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
    - elb
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: badegposer
      Port: 80
      Protocol: 'HTTP'
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: env
          Value: badge-poser

  # ELB LISTENER RULE
  elblistenerrule80:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: redirect
        RedirectConfig:
          Host: "#{host}"
          Path: "/#{path}"
          Port: "443"
          Protocol: HTTPS
          Query: "#{query}"
          StatusCode: HTTP_301
      Conditions:
      - Field: path-pattern
        Values: [/*]
      ListenerArn: !Ref 'elblistener80'
      Priority: 1
  elblistenerrule443:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn:
    - elblistener443
    - elbtargetgroup
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'elbtargetgroup'
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - poser.pugx.org
        - Field: path-pattern
          Values: [/*]
      ListenerArn: !Ref 'elblistener443'
      Priority: 1

  # SCHEDULED TASK
  eventrulecontributorsupdate:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: app-contributors-update
      ScheduleExpression: rate(24 hours)
      State: ENABLED
      Targets:
        - Id: phpfpm
          Arn: !GetAtt ecscluster.Arn
          RoleArn: !Ref 'ExecRoleArn'
          Input: !Join [ '', [ "{\"containerOverrides\":", "[{\"name\":\"phpfpm\",\"command\":[\"./bin/console\",", "\"app:contributors:update\"]}]}" ]]
          EcsParameters:
            TaskDefinitionArn: !Ref 'ecstask'
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                SecurityGroups:
                  - !Ref 'sgecs'
                Subnets: !Ref 'Subnets'
